{"version":3,"sources":["components/TextBlock.js","components/Page.js","components/Button.js","components/Notifications.js","components/PageTitle.js","Utils.js","components/Alert.js","components/CodeExample.js","pages/Home/logo.svg","AppRouter.js","pages/NoneFound/NoneFound.js","pages/Home/Intro.js","components/SectionTitle.js","pages/Home/RoutesConfiguration.js","components/LinkButton.js","pages/Home/AppRouterReference.js","pages/Home/PageComponentsReference.js","pages/Home/DataFetchingReference.js","pages/Home/NoneFoundReference.js","pages/Home/RetryOnFailureReference.js","pages/Home/AbortNavigationReference.js","pages/Home/ErrorPageReference.js","pages/Home/HomePage.js","pages/Fourth/FourthPage.js","pages/Abort/AbortPage.js","pages/Error/ErrorPage.js","pages/Error/ErrorThrowingPage.js","routes.js","serviceWorker.js","components/Loader.js","index.js","components/ExternalLink.js","config.js"],"names":["TextBlock","children","className","PageCache","Page","scrollTop","pathname","location","useLocation","useRef","current","useInitialPathname","elemRef","useEffect","elem","ref","onScroll","Button","bgColor","textColor","onClick","props","useState","isLoading","setLoading","disabled","evt","Store","reducer","state","action","type","concat","payload","filter","item","id","addNotice","channel","content","timeout","Date","now","dispatch","NotificationsList","useReducer","getState","map","key","NOTIFICATION_FADE_ANIMATION","Notification","setTimeout","removeNotice","PageTitle","sleep","ms","Promise","resolve","tryAtMost","asyncReq","maxRetries","retryInterval","maxRetryInterval","onFail","_noop","onReady","canRetry","_constant","a","retries","result","error","interval","Math","min","MockFetchFailure","constructor","this","bind","proxy","fetch","Error","TOASTS","Alert","kind","clr","getAlertColor","role","Prism","window","CodeExample","title","__html","highlight","languages","jsx","dangerouslySetInnerHTML","module","exports","AppRouter","basename","AnimationApp","routes","animation","onError","onLoading","activePage","setState","Component","locationRef","setActivePage","route","idx","exact","path","render","routeProps","PageLoader","fetchOptions","TransitionGroup","CSSTransition","isMounted","hasLoading","isFunction","initializePage","then","catch","handle","importComponent","component","default","getInitialProps","links","initialProps","React","memo","fn","NoneFound","history","goBack","Intro","ExternalLink","to","class","SectionTitle","style","paddingLeft","marginLeft","width","RoutesConfiguration","LinkButton","AppRouterReference","linkTo","onNavigateClick","PageComponentsReference","DataFetchingReference","NoneFoundReference","RetryOnFailureReference","AbortNavigationReference","ErrorPageReference","HomePage","src","logo","alt","basicRouting","push","dataFetching","noneFound","cancelNavigation","errorThrowingPage","retryOnFailure","FourthPage","AbortPage","InitializeError","message","ErrorPage","ErrorThrowingPage","mockedImport","Boolean","hostname","match","Loader","MyApp","PAGE_FADE_ANIMATION","prev","next","home","replace","Notifications","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","href","target","rel","classNames","onEnter","classList","add","onEntering","remove","onExit","onExited","onExiting"],"mappings":"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","file":"static/js/main.18a0b37e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const TextBlock = ({ children }) => (\n  <p className=\"text-base text-gray-600 leading-normal mb-2\">{children}</p>\n);\n","import React, { useEffect, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst PageCache = {};\n\nexport const Page = ({ className, scrollTop, children }) => {\n  const pathname = useInitialPathname();\n  const elemRef = useRef();\n\n  useEffect(\n    function restoreScrollPosition() {\n      const elem = elemRef.current;\n      if (scrollTop) {\n        elem.scrollTop = 0;\n      } else if (pathname in PageCache) {\n        elem.scrollTop = PageCache[pathname];\n      }\n    },\n    [scrollTop, pathname, elemRef]\n  );\n\n  const saveScrollPosition = () => {\n    PageCache[pathname] = elemRef.current.scrollTop;\n  };\n\n  return (\n    <div\n      ref={elemRef}\n      className=\"absolute left-0 top-0 right-0 bottom-0 overflow-auto\"\n      onScroll={saveScrollPosition}\n    >\n      <div\n        className={`max-w-screen-xl mx-auto py-6 px-6 md:px-12 bg-white ${className}`}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Returns the pathname at the moment the component was\n *  mounted into the page.\n */\nfunction useInitialPathname() {\n  const location = useLocation();\n  const ref = useRef(location.pathname);\n  return ref.current;\n}\n","import React, { useState } from \"react\";\n\nexport const Button = ({\n  bgColor = \"bg-blue-500 hover:bg-blue-700\",\n  textColor = \"text-white\",\n  onClick,\n  children,\n  ...props\n}) => {\n  const [isLoading, setLoading] = useState(false);\n  return (\n    <button\n      {...props}\n      className={`${bgColor} ${textColor} font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline`}\n      disabled={isLoading}\n      onClick={evt => {\n        setLoading(true);\n        onClick(evt);\n      }}\n    >\n      {isLoading ? \"Loading ...\" : children}\n    </button>\n  );\n};\n","import React, { useReducer, useEffect } from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { NOTIFICATION_FADE_ANIMATION } from \"config\";\nconst Store = {};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\":\n      return state.concat(action.payload);\n    case \"REMOVE\":\n      return state.filter((item) => item.id !== action.payload);\n    default:\n      return state;\n  }\n}\n\nexport function addNotice(channel, content, timeout) {\n  const id = Date.now();\n  Store[channel].dispatch({\n    type: \"ADD\",\n    payload: { id, content, timeout },\n  });\n  return id;\n}\n\nexport function removeNotice(channel, id) {\n  Store[channel].dispatch({\n    type: \"REMOVE\",\n    payload: id,\n  });\n}\n\n// export function changeNotice(channel, id, content, timeout) {\n//     Store[channel].dispatch({\n//         type: 'REMOVE',\n//         payload: id\n//     });\n// }\n\nexport const NotificationsList = ({ channel }) => {\n  const [state, dispatch] = useReducer(reducer, []);\n\n  useEffect(\n    function initChannel() {\n      Store[channel] = {\n        getState: () => state,\n        dispatch: dispatch,\n      };\n      return function dispose() {\n        Store[channel] = null;\n      };\n    },\n    [channel, state, dispatch]\n  );\n\n  return (\n    <TransitionGroup className=\"fixed z-100 bottom-0 pb-2 right-0 sm:pb-5 text-right\">\n      {state.map((item) => (\n        <CSSTransition key={item.id} {...NOTIFICATION_FADE_ANIMATION}>\n          <Notification channel={channel} item={item} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nconst Notification = ({ channel, item }) => {\n  useEffect(\n    function dismiss() {\n      const { id, timeout } = item;\n      if (timeout) {\n        setTimeout(() => removeNotice(channel, id), timeout);\n      }\n    },\n    [channel, item]\n  );\n\n  return (\n    <div className=\"transition transform ease-out duration-500 mb-2\">\n      <div className=\"inline-block px-2 sm:px-4\">\n        <div className=\"p-2 rounded-lg bg-gray-700 shadow-lg sm:p-3\">\n          <p className=\"font-medium text-white truncate\">{item.content}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PageTitle = ({ children }) => (\n  <h1 className=\"text-4xl font-display leading-tight text-blue-800 my-4\">\n    {children}\n  </h1>\n);\n","import _noop from \"lodash.noop\";\nimport _constant from \"lodash.constant\";\nimport { TOASTS } from \"config\";\nimport { addNotice } from \"components/Notifications\";\n\n/**\n * Async sleep\n * See: https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\n * @param {number} ms\n */\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Attempts to make an async request with retries and backoff\n * Adapted from: https://gist.github.com/briancavalier/842626\n * @param {async function} asyncReq\n * @param {number} options.maxRetries\n * @param {number} options.retryInterval\n * @param {number} options.maxRetryInterval\n * @param {function} options.onFail\n * @param {function} options.onReady\n */\nexport async function tryAtMost(\n  asyncReq,\n  {\n    // options\n    maxRetries = 5,\n    retryInterval = 250,\n    maxRetryInterval = 1000,\n    onFail = _noop,\n    onReady = _noop,\n    canRetry = _constant(true)\n  } = {}\n) {\n  let retries = 0;\n  while (retries++ < maxRetries) {\n    try {\n      const result = await asyncReq();\n      onReady({ retries, result });\n      return result;\n    } catch (error) {\n      onFail({ retries, maxRetries, error });\n      if (retries >= maxRetries || !canRetry(error)) {\n        throw error;\n      }\n      const interval = Math.min(maxRetryInterval, retryInterval * retries);\n      await sleep(interval);\n    }\n  }\n}\n\nexport class MockFetchFailure {\n  constructor() {\n    this.retries = 0;\n    this.onFail = this.onFail.bind(this);\n    this.onReady = this.onReady.bind(this);\n    this.canRetry = this.canRetry.bind(this);\n  }\n\n  proxy(result) {\n    this.result = result;\n    return this.fetch.bind(this);\n  }\n\n  async fetch() {\n    this.retries = (this.retries || 0) + 1;\n    if (this.retries >= 3) {\n      return this.result;\n    }\n    throw new Error(\"Failure\");\n  }\n\n  onFail() {\n    addNotice(TOASTS, `${this.retries}: Failure`, this.retries * 1000);\n  }\n\n  onReady() {\n    addNotice(TOASTS, `${this.retries}: Success`, 1000);\n    this.retries = 0;\n  }\n\n  canRetry() {\n    return true;\n  }\n}\n","import React from \"react\";\n\nexport const Alert = ({ children, kind = null }) => {\n  const clr = getAlertColor(kind);\n  return (\n    <div\n      className={`bg-${clr}-100 border-l-4 border-${clr}-500 text-${clr}-700 p-4 w-full`}\n      role=\"alert\"\n    >\n      {children}\n    </div>\n  );\n};\n\nfunction getAlertColor(kind) {\n  switch (kind) {\n    case \"info\":\n      return \"blue\";\n    case \"error\":\n      return \"red\";\n    default:\n      return \"gray\";\n  }\n}\n","import React from \"react\";\nconst { Prism } = window;\n\nexport const CodeExample = ({ title, children }) => {\n  const __html = Prism.highlight(children, Prism.languages.jsx, \"jsx\");\n  return (\n    <>\n      {title && <h4 className=\"text-blue-600 my-3\">{title}</h4>}\n      <pre className=\"max-w-full overflow-auto bg-gray-100 px-2 md:px-6 border-l-4 border-orange-500 mb-4 shadow-md\">\n        <code className=\"text-sm\" dangerouslySetInnerHTML={{ __html }} />\n      </pre>\n    </>\n  );\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useLocation,\n} from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { tryAtMost } from \"Utils\";\n\n/**\n * Main router component\n */\nexport const AppRouter = ({ basename, ...props }) => {\n  // console.log('AppRouter::render');\n  return (\n    <Router basename={basename}>\n      <AnimationApp {...props} />\n    </Router>\n  );\n};\n\nAppRouter.propTypes = {\n  basename: PropTypes.string,\n  routes: PropTypes.array.isRequired,\n  animation: PropTypes.object.isRequired,\n  onError: PropTypes.func,\n  onLoading: PropTypes.func,\n};\n\nconst AnimationApp = ({ routes, animation, onError, onLoading }) => {\n  const location = useLocation();\n  const [activePage, setState] = useState({});\n  const { Component, props } = activePage;\n  const key = (props && props.location.key) || \"initial\";\n\n  // In cases where a route is still loading and the\n  //  user navigates to another route, setActivePage will\n  //  still be called when the previous route finishes loading\n  //  so we need to check if the URL changed in between\n  const locationRef = useRef();\n  locationRef.current = location.key;\n  const setActivePage = (props) => {\n    // location.key is the value expected by the component that invoked setActivePage.\n    // locationRef.current is the value of the actual route in the address bar.\n    // If these are different, it means that the route changed while the page was still loading.\n    if (location.key === locationRef.current) {\n      setState(props);\n    }\n  };\n\n  return (\n    <>\n      {/*\n       * When a new route is matched, instead of directly rendering a page\n       *  we first fetch the component (if needed) and then\n       *  fetch its initial properties (if needed)\n       */}\n      <Switch location={location}>\n        {routes.map((route, idx) => (\n          <Route\n            exact\n            key={route.id || idx}\n            path={route.path}\n            render={(routeProps) => (\n              <PageLoader\n                route={route}\n                routeProps={routeProps}\n                setActivePage={setActivePage}\n                onError={onError}\n                onLoading={onLoading}\n                fetchOptions={route.fetchOptions}\n              />\n            )}\n          />\n        ))}\n      </Switch>\n      {/*\n       * Once the component is fully loaded we change the state of\n       *  AnimationApp component and display the new page using a CSS transition.\n       */}\n      <TransitionGroup>\n        {/*\n         * CSSTransition element has to be a direct descendant of TransitionGroup\n         *  Otherwise the exit animations won't work\n         */}\n        {Component && (\n          <CSSTransition key={key} {...animation}>\n            <Component {...props} />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </>\n  );\n};\n\nconst PageLoader = (props) => {\n  // Use a ref on the props to ensure we run the effect\n  //  only once during the life of this component\n  const ref = useRef(props);\n\n  useEffect(\n    function loadPage() {\n      let isMounted = true;\n      const { onLoading } = ref.current;\n      const hasLoading = isFunction(onLoading);\n      hasLoading && onLoading(true);\n      initializePage(ref.current)\n        .then(function onSuccess() {\n          if (isMounted && hasLoading) {\n            onLoading(false);\n          }\n        })\n        .catch(function onError(error) {\n          if (!isMounted) {\n            return;\n          }\n          const { routeProps, onLoading, onError } = ref.current;\n          if (isFunction(onLoading)) {\n            onLoading(false);\n          }\n          // Choose an error handling strategy\n          if (isFunction(error.handle)) {\n            error.handle(routeProps);\n          } else if (isFunction(onError)) {\n            onError({ ...routeProps, error });\n          } else {\n            throw error;\n          }\n        });\n\n      return () => {\n        isMounted = false;\n      };\n    },\n    [ref]\n  );\n\n  return null;\n};\n\nasync function initializePage({\n  route,\n  routeProps,\n  setActivePage,\n  fetchOptions,\n}) {\n  if (!route.importComponent && !route.component) {\n    throw new Error(\n      \"A route must include a component or importComponent method\"\n    );\n  }\n\n  let Component, initialProps;\n\n  if (typeof route.importComponent === \"function\") {\n    const module = await tryAtMost(route.importComponent, fetchOptions);\n    Component = module.default;\n  } else {\n    Component = route.component;\n  }\n\n  if (typeof Component.getInitialProps === \"function\") {\n    initialProps = await Component.getInitialProps({\n      ...routeProps,\n      links: route.links,\n    });\n  }\n\n  setActivePage({\n    Component: React.memo(Component),\n    props: {\n      ...routeProps,\n      ...initialProps,\n      links: route.links,\n    },\n  });\n}\n\nfunction isFunction(fn) {\n  return typeof fn === \"function\";\n}\n","import React from \"react\";\nimport { Page } from \"components/Page\";\nimport { Button } from \"components/Button\";\nimport { Alert } from \"components/Alert\";\n\nexport function NoneFound({ history }) {\n  return (\n    <Page>\n      <Alert kind=\"error\">\n        <p className=\"font-bold\">None Found</p>\n        <p className=\"mb-2\">The page you requested does not exists</p>\n      </Alert>\n      <div className=\"mt-2\">\n        <Button onClick={() => history.goBack()}>Back</Button>\n      </div>\n    </Page>\n  );\n}\n","import React from \"react\";\nimport { ExternalLink } from \"components/ExternalLink\";\nimport { TextBlock } from \"components/TextBlock\";\n\nexport const Intro = () => (\n  <>\n    <TextBlock>\n      This is a demo implementing{\" \"}\n      <ExternalLink to=\"https://reacttraining.com/react-router/web/guides/quick-start\">\n        React-Router v5\n      </ExternalLink>{\" \"}\n      with some extra cool features:\n      <ul class=\"list-decimal pl-12 my-4\">\n        <li>An intuitive page-based routing configuration</li>\n        <li>Animated transitions</li>\n        <li>Scroll restoration</li>\n        <li>Fetching data before navigation</li>\n        <li>Code splitting for faster page loads</li>\n        <li>Retry fetch upon failure</li>\n      </ul>\n    </TextBlock>\n    <TextBlock>\n      Animation transitions between the pages is done with{\" \"}\n      <ExternalLink to=\"https://reactcommunity.org/react-transition-group/css-transition\">\n        CSSTransition\n      </ExternalLink>\n      .<br /> Styling and animations are implemented with{\" \"}\n      <ExternalLink to=\"https://tailwindcss.com/\">Tailwind CSS</ExternalLink>.\n    </TextBlock>\n\n    <h2 className=\"text-lg text-blue-700 my-3\">Scroll Restoration</h2>\n    <TextBlock>\n      The animated transition between the pages breaks the browser's\n      out-of-the-box{\" \"}\n      <ExternalLink to=\"https://reacttraining.com/react-router/web/guides/scroll-restoration\">\n        scroll restoration\n      </ExternalLink>\n      .\n      <br />\n      The <strong>Page</strong> component used in this demo includes custom\n      logic to persist and restore the scroll position.\n    </TextBlock>\n  </>\n);\n","import React from \"react\";\n\nexport const SectionTitle = ({ children }) => (\n  <h1\n    className=\"text-2xl font-display leading-tight text-blue-400 bg-gray-100 my-2 py-4 border-t border-b border-blue-200\"\n    style={{\n      paddingLeft: \"25%\",\n      marginLeft: \"-25%\",\n      width: \"150%\",\n    }}\n  >\n    {children}\n  </h1>\n);\n","import React from \"react\";\nimport { SectionTitle } from \"components/SectionTitle\";\nimport { TextBlock } from \"components/TextBlock\";\n\nexport const RoutesConfiguration = () => (\n  <>\n    <SectionTitle>Routes Configuration</SectionTitle>\n    <TextBlock>Routes Configuration</TextBlock>\n  </>\n);\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const LinkButton = ({\n  to,\n  textColor = \"text-blue-500 hover:text-blue-700\",\n  bgColor = \"bg-gray-100 hover:bg-gray-200\",\n  children,\n  ...props\n}) => {\n  const [isLoading, setLoading] = useState(false);\n  return (\n    <Link\n      {...props}\n      to={to}\n      className={`${textColor} ${bgColor} underline py-2 px-4 inline-block text-center`}\n      onClick={() => setLoading(true)}\n    >\n      {isLoading ? \"Loading ...\" : children}\n    </Link>\n  );\n};\n","import React from \"react\";\nimport { Button } from \"components/Button\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { ExternalLink } from \"components/ExternalLink\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const AppRouterReference = ({ linkTo, onNavigateClick }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">AppRouter</h3>\n    <div className=\"max-w-full overflow-x-scroll\">\n      <table className=\"table-auto text-sm text-gray-600 mb-2\">\n        <thead className=\"text-blue-700\">\n          <tr>\n            <th className=\"px-4 py-2\">Property</th>\n            <th className=\"px-4 py-2\">Type</th>\n            <th className=\"px-4 py-2\">Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">basename</td>\n            <td className=\"border px-4 py-2 text-blue-500\">string</td>\n            <td className=\"border px-4 py-2\">\n              The base URL for all locations. If your app is served from a\n              sub-directory on your server, you’ll want to set this to the\n              sub-directory. A properly formatted basename should have a leading\n              slash, but no trailing slash.\n            </td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">animation</td>\n            <td className=\"border px-4 py-2 text-blue-500\">object</td>\n            <td className=\"border px-4 py-2\">\n              Properties to be forwarded to{\" \"}\n              <ExternalLink to=\"https://reactcommunity.org/react-transition-group/css-transition\">\n                CSSTransition\n              </ExternalLink>{\" \"}\n              component.\n            </td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">routes</td>\n            <td className=\"border px-4 py-2 text-blue-500\">array</td>\n            <td className=\"border px-4 py-2\">\n              An array of objects containing the route configuration for each\n              page.\n              <br />\n              See <strong>/src/routes.js</strong> for available options.\n            </td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">onError</td>\n            <td className=\"border px-4 py-2 text-blue-500\">function</td>\n            <td className=\"border px-4 py-2\">\n              Callback in case an error is thrown at{\" \"}\n              <strong>getInitialProps</strong>.\n              <br />\n              The function will be called with{\" \"}\n              <ExternalLink to=\"https://reacttraining.com/react-router/web/api/Route/route-props\">\n                route-props\n              </ExternalLink>{\" \"}\n              and the error object thrown.\n            </td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">onLoading</td>\n            <td className=\"border px-4 py-2 text-blue-500\">function</td>\n            <td className=\"border px-4 py-2\">\n              A callback invoked when a page transition starts and when it ends.\n              <br />\n              It receives a boolean parameter indicating if there is an ongoing\n              transition.\n              <br />\n              You can use this function to display a loading indicator.\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <CodeExample title=\"Example\">\n      {`\nconst MyApp = () => {\n  const [isLoading, setLoading] = useState(false);\n  return (\n    <>\n      <AppRouter\n        basename=\"/my-app\"\n        routes={routes}\n        animation={{\n          timeout={200} \n          classNames=\"my-page\"\n        }}\n        onError={props => props.history.replace(\"/error\", props.error)}\n        onLoading={setLoading}\n      />\n      {isLoading && <LoadingIndicator />}\n    </>\n  );\n};\n      `}\n    </CodeExample>\n    <h4 className=\"text-blue-600 my-2\">Example: Basic Routing.</h4>\n    <TextBlock>\n      Navigate to next page using a link or programatically. In this example the\n      page is being lazy loaded from the server before the animation starts.\n    </TextBlock>\n    <div className=\"grid grid-rows-1 grid-flow-col gap-8 px-8\">\n      <LinkButton to={linkTo}>Navigate with Link</LinkButton>\n      <Button onClick={onNavigateClick}>Navigate on click</Button>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { ExternalLink } from \"components/ExternalLink\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const PageComponentsReference = () => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">Page components</h3>\n    <TextBlock>\n      Components used to display the contents of a route will be rendered with{\" \"}\n      <ExternalLink to=\"https://reacttraining.com/react-router/web/api/Route/route-props\">\n        route-props\n      </ExternalLink>\n      .<br />\n      See the documentation of React Router Web for details.\n      <br />\n      Additionally, the component will receive the <strong>links</strong>{\" \"}\n      property defined in the route configuration.\n    </TextBlock>\n    <CodeExample>\n      {`\nconst MyPage = ({ match, location, history, links }) => {\n  return <p>Page contents</p>;\n}`}\n    </CodeExample>\n  </>\n);\n","import React from \"react\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const DataFetchingReference = ({ linkTo }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">Data Fetching</h3>\n    <TextBlock>\n      Every time you need to get asynchronous data, you can implement a{\" \"}\n      <strong>static async</strong> method <strong>getInitialProps</strong> that\n      is called when navigating.\n    </TextBlock>\n\n    <CodeExample title=\"Class components\">\n      {`\nclass MyPage {\n  static async getInitialProps({ match, location, history, links }) {\n    const myData = await myApi.fetchSomeData();\n    // return an object with the properties to inject\n    return { myData };\n  }\n\n  render() {\n    return <p>Page contents: {this.props.myData} </p>;\n  }\n}\n`}\n    </CodeExample>\n\n    <CodeExample title=\"Functional components\">\n      {`\nconst MyPage = ({ myData }) => (\n  <p>Page contents: {myData} </p>\n);\n\nMyPage.getInitialProps = async ({ match, location, history, links }) => {\n  const myData = await myApi.fetchSomeData();\n  // return an object with the properties to inject\n  return { myData };\n}\n`}\n    </CodeExample>\n\n    <h4 className=\"text-blue-600 my-2\">Example: Data fetching.</h4>\n    <TextBlock>\n      Click on the link to navigate to the next page, the page will not be\n      displayed until the data is fetched.\n      <br />\n      Note that while the page loads, a <strong>loading indicator</strong> is\n      displayed at the top.\n    </TextBlock>\n    <div className=\"text-center\">\n      <LinkButton to={linkTo}>Navigate after data fetching</LinkButton>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const NoneFoundReference = ({ linkTo }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">\n      Handling unresolved routes (None Found){\" \"}\n    </h3>\n    <TextBlock>\n      In the routes configuration you can add set up a page that will be\n      displayed in case none of the defined routes matches the requested url.\n      You can do this by omitting the <strong>path</strong> property in the\n      configuration.\n    </TextBlock>\n\n    <CodeExample title=\"Configuration example\">\n      {`\nconst routes = [\n  {\n    // other routes...\n  },\n  ...\n  {\n    component: My404Page,\n    links: {\n      home: \"/\"\n    }\n  }\n];\n      `}\n    </CodeExample>\n\n    <div className=\"text-center\">\n      <LinkButton to={linkTo}>Navigate to an undefined path</LinkButton>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { TextBlock } from \"components/TextBlock\";\n\nexport const RetryOnFailureReference = ({ linkTo }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">Retry on network failure.</h3>\n    <TextBlock>\n      When using code splitting to lazy load the pages, there is a possibility\n      that the page won't load if the network connection is unreliable. In these\n      cases, the app router will automatically wait and retry to fetch the page\n      again.\n    </TextBlock>\n\n    <div className=\"max-w-full overflow-x-scroll\">\n      <table className=\"table-auto text-sm text-gray-600 mb-2\">\n        <thead className=\"text-blue-700\">\n          <tr>\n            <th className=\"px-4 py-2\">Retry</th>\n            <th className=\"px-4 py-2\">Waiting time in milliseconds</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">1</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              250 <small>(1&times;250) </small>\n            </td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">2</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              500 <small>(2&times;250) </small>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">3</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              750 <small>(3&times;250) </small>\n            </td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">4</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              1000 <small>(4&times;250) </small>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">5</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              1000 <small>(max retry interval) </small>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <TextBlock>\n      The following live example uses a wrapper around the{\" \"}\n      <strong>import</strong> statement to force the page to fail the first{\" \"}\n      <strong>two</strong> times. A notification is displayed after each\n      attempt.\n    </TextBlock>\n    <div className=\"text-center\">\n      <LinkButton to={linkTo}>Click here to start the demo</LinkButton>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const AbortNavigationReference = ({ linkTo }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">Cancel navigation.</h3>\n    <TextBlock>\n      You can cancel the ongoing navigation from{\" \"}\n      <strong>getInitialProps</strong> by throwing an object with a{\" \"}\n      <strong>handle</strong> method, inside this method you can then navigate\n      to any other route using the <strong>history</strong> object.\n    </TextBlock>\n\n    <CodeExample title=\"Example\">\n      {`\n/* Custom error object */\nfunction InitializeError(handle) {\n  this.message = \"Initialization error\";\n  this.handle = handle;\n}\n\nexport function MyPage() {\n  return null;\n}\n\nMyPage.getInitialProps = async function getInitialProps() {\n  // Go back to the previous page instead of loading the current route\n  throw new InitializeError(({ history }) => history.goBack());\n};\n`}\n    </CodeExample>\n\n    <div className=\"text-center\">\n      <LinkButton to={linkTo}>Click here to start the demo</LinkButton>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { LinkButton } from \"components/LinkButton\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const ErrorPageReference = ({ linkTo }) => (\n  <>\n    <h3 className=\"text-lg text-blue-700 my-3\">Handle errors.</h3>\n    <TextBlock>\n      You can use the <strong>onError</strong> callback to redirect to another\n      location in case a route failed to load.\n    </TextBlock>\n\n    <CodeExample title=\"AppRouter setup\">\n      {`\n<AppRouter\n  ...\n  onError={\n    ({ history, error }) => {\n      // Redirect to the error page when a route fails to load\n      //  send the error object to the page as part of location.state\n      history.replace(\"/error\", { error })\n    }\n  }\n/>\n      `}\n    </CodeExample>\n\n    <CodeExample title=\"Page throwing an error\">\n      {`\nexport const ErrorThrowingPage = () => (\n  <p>This page throws an error when loading</p>\n);\n\nErrorThrowingPage.getInitialProps = () => {\n  throw new Error(\"Something went wrong\");\n};\n      `}\n    </CodeExample>\n\n    <CodeExample title=\"Error page\">\n      {`\nconst ErrorPage = ({ location, history }) => {\n  const { error } = location.state;\n  return (\n    <>\n      <h1>Error</h1>\n      <p>\n        {error.message /* Something went wrong */}\n      </p>\n    </>\n  );\n};\n      `}\n    </CodeExample>\n\n    <div className=\"text-center\">\n      <LinkButton to={linkTo}>Click here to start the demo</LinkButton>\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { Page } from \"components/Page\";\nimport { PageTitle } from \"components/PageTitle\";\nimport { Intro } from \"./Intro\";\nimport { RoutesConfiguration } from \"./RoutesConfiguration\";\nimport { AppRouterReference } from \"./AppRouterReference\";\nimport { PageComponentsReference } from \"./PageComponentsReference\";\nimport { DataFetchingReference } from \"./DataFetchingReference\";\nimport { NoneFoundReference } from \"./NoneFoundReference\";\nimport { RetryOnFailureReference } from \"./RetryOnFailureReference\";\nimport { AbortNavigationReference } from \"./AbortNavigationReference\";\nimport { ErrorPageReference } from \"./ErrorPageReference\";\nimport logo from \"./logo.svg\";\n\nexport function HomePage({ history, links }) {\n  return (\n    <Page>\n      <div className=\"flex justify-center\">\n        <img src={logo} className=\"app-logo\" alt=\"logo\" />\n      </div>\n\n      <PageTitle>React advanced navigation</PageTitle>\n\n      <Intro />\n\n      <RoutesConfiguration />\n\n      <AppRouterReference\n        linkTo={links.basicRouting}\n        onNavigateClick={() => history.push(links.basicRouting)}\n      />\n\n      <PageComponentsReference />\n\n      <DataFetchingReference linkTo={links.dataFetching} />\n\n      <NoneFoundReference linkTo={links.noneFound} />\n\n      <AbortNavigationReference linkTo={links.cancelNavigation} />\n\n      <ErrorPageReference linkTo={links.errorThrowingPage} />\n\n      <RetryOnFailureReference linkTo={links.retryOnFailure} />\n\n      {/*\n        - Fatal Error Page\n        - Scroll preserve ? \n      */}\n    </Page>\n  );\n}\n","import React from \"react\";\nimport { Page } from \"components/Page\";\nimport { PageTitle } from \"components/PageTitle\";\nimport { TextBlock } from \"components/TextBlock\";\nimport { Button } from \"components/Button\";\nimport { CodeExample } from \"components/CodeExample\";\n\nexport const FourthPage = ({ history }) => (\n  <Page scrollTop>\n    <PageTitle>Fetch Retry Example</PageTitle>\n\n    <TextBlock>\n      You can configure a custom retry behaviour by passing a{\" \"}\n      <strong>fetchOptions</strong> attribute to the routes configuration.\n    </TextBlock>\n\n    <div className=\"max-w-full overflow-x-scroll\">\n      <table className=\"table-auto text-sm text-gray-600 mb-2\">\n        <thead className=\"text-blue-700\">\n          <tr>\n            <th className=\"px-4 py-2\">Attribute</th>\n            <th className=\"px-4 py-2\">Type</th>\n            <th className=\"px-4 py-2\">Description</th>\n            <th className=\"px-4 py-2\">Default</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">maxRetries</td>\n            <td className=\"border px-4 py-2 text-blue-500\">integer</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              The maximum number of retries\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">5</td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">retryInterval</td>\n            <td className=\"border px-4 py-2 text-blue-500\">integer</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              The base waiting time in milliseconds\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">250</td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">maxRetryInterval</td>\n            <td className=\"border px-4 py-2 text-blue-500\">integer</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              The maximum allowed waiting time in milliseconds\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">1000</td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">onFail</td>\n            <td className=\"border px-4 py-2 text-blue-500\">function</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              A function to be called after a failure\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">{\"() => {}\"}</td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">onReady</td>\n            <td className=\"border px-4 py-2 text-blue-500\">function</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              A function to be called success\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">{\"() => {}\"}</td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">canRetry</td>\n            <td className=\"border px-4 py-2 text-blue-500\">function</td>\n            <td className=\"border px-4 py-2 text-blue-800\">\n              A function that given an <strong>error</strong> object returns{\" \"}\n              <strong>true</strong> if the next retry can be attempted.\n            </td>\n            <td className=\"border px-4 py-2 text-blue-800\">{\"() => true\"}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <CodeExample title=\"Custom configuration example\">\n      {`\nconst routes = [\n  ...\n  {\n    path: \"/my-page\",\n    importComponent: () => import(\"pages/MyPage\"),\n    fetchOptions: {\n      maxRetries: 3,\n      retryInterval: 2000,\n      maxRetryInterval: 4000,\n      onFail({ retries, result }) { ... },\n      onReady({ retries, maxRetries, error }) { ... },\n      canRetry(error) { return true; }\n    },\n    links: {\n      ...\n    }\n  },\n  ...\n];\n      `}\n    </CodeExample>\n    <TextBlock>\n      In the example above, if there is an error while fetching the related code\n      for \"/my-page\" route, the router will retry up to{\" \"}\n      <strong>maxRetries</strong> times, waiting each time a multiple of{\" \"}\n      <strong>retryInterval</strong> before attempting to fetch the page again,\n      but no longer than the specified <strong>maxRetryInterval</strong>.\n    </TextBlock>\n    <div className=\"max-w-full overflow-x-scroll\">\n      <table className=\"table-auto text-sm text-gray-600 mb-2\">\n        <thead className=\"text-blue-700\">\n          <tr>\n            <th className=\"px-4 py-2\">Retry</th>\n            <th className=\"px-4 py-2\">Waiting time in milliseconds</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">1</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              2000 <small>(1&times;2000) </small>\n            </td>\n          </tr>\n          <tr className=\"bg-gray-100\">\n            <td className=\"border px-4 py-2 text-gray-800\">2</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              4000 <small>(2&times;2000) </small>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"border px-4 py-2 text-gray-800\">3</td>\n            <td className=\"border px-4 py-2 text-blue-500\">\n              4000 <small>(maxRetryInterval) </small>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div className=\"mt-2 text-center\">\n      <Button onClick={() => history.goBack()}>Back</Button>\n    </div>\n  </Page>\n);\n","import React from \"react\";\nimport { sleep } from \"Utils\";\nimport { TOASTS } from \"config\";\nimport { addNotice } from \"components/Notifications\";\n\nexport function AbortPage() {\n  return (\n    <div>\n      <h4>AbortPage page</h4>\n      <p>This page will never render</p>\n    </div>\n  );\n}\n\nAbortPage.getInitialProps = async function getInitialProps() {\n  await sleep(1000);\n  addNotice(TOASTS, \"Failed to fetch data\", 2000);\n  throw new InitializeError(({ history }) => history.goBack());\n};\n\nfunction InitializeError(handle) {\n  this.message = \"Initialization error\";\n  this.handle = handle;\n}\n","import React from \"react\";\nimport { Page } from \"components/Page\";\nimport { PageTitle } from \"components/PageTitle\";\nimport { Button } from \"components/Button\";\nimport { Alert } from \"components/Alert\";\n\nexport function ErrorPage({ location, history }) {\n  const error = location.state;\n  return (\n    <Page>\n      <PageTitle>Error Page</PageTitle>\n      <Alert kind=\"error\">\n        <p className=\"font-bold\">Critical error</p>\n        {error && <p className=\"mb-2\">{error.message}</p>}\n      </Alert>\n      <div className=\"mt-2\">\n        <Button onClick={() => history.goBack()}>Back</Button>\n      </div>\n    </Page>\n  );\n}\n","import React from \"react\";\n\nexport const ErrorThrowingPage = () => (\n  <p>This page throws an error when loading</p>\n);\n\nErrorThrowingPage.getInitialProps = () => {\n  throw new Error(\"This error was thrown from the page component\");\n};\n","import { NoneFound } from \"pages/NoneFound/NoneFound\";\nimport { HomePage } from \"pages/Home/HomePage\";\nimport { FourthPage } from \"pages/Fourth/FourthPage\";\nimport { AbortPage } from \"pages/Abort/AbortPage\";\nimport { ErrorPage } from \"pages/Error/ErrorPage\";\nimport { ErrorThrowingPage } from \"pages/Error/ErrorThrowingPage\";\nimport { MockFetchFailure } from \"Utils\";\n\nconst mockedImport = new MockFetchFailure();\n\nexport default function getRoutes() {\n  return [\n    {\n      path: \"/\",\n      component: HomePage,\n      links: {\n        basicRouting: \"/second\",\n        dataFetching: \"/third\",\n        noneFound: \"/foo_bar\",\n        retryOnFailure: \"/fourth\",\n        cancelNavigation: \"/abort\",\n        errorThrowingPage: \"/throw-error\"\n      }\n    },\n    {\n      path: \"/second\",\n      importComponent: () => import(\"pages/Second/SecondPage\")\n    },\n    {\n      path: \"/third\",\n      importComponent: () => import(\"pages/Third/ThirdPage\")\n    },\n    {\n      path: \"/fourth\",\n      importComponent: mockedImport.proxy({ default: FourthPage }),\n      fetchOptions: {\n        maxRetries: 3,\n        retryInterval: 2000,\n        maxRetryInterval: 4000,\n        onFail: mockedImport.onFail,\n        onReady: mockedImport.onReady,\n        canRetry: mockedImport.canRetry\n      },\n      links: {\n        prev: \"/third\",\n        next: \"/\"\n      }\n    },\n    {\n      path: \"/abort\",\n      component: AbortPage\n    },\n    {\n      path: \"/throw-error\",\n      component: ErrorThrowingPage\n    },\n    {\n      path: \"/error\",\n      component: ErrorPage\n    },\n    {\n      component: NoneFound,\n      links: {\n        home: \"/\"\n      }\n    }\n  ];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport const Loader = () => (\n  <div className=\"loading-bar fixed z-50 inset-x-0 top-0 h-1\"></div>\n);\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/bundle.css\";\n\nimport { AppRouter } from \"./AppRouter\";\nimport getRoutes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import { ErrorPage } from \"pages/Error/ErrorPage\";\nimport { Loader } from \"components/Loader\";\nimport { NotificationsList } from \"components/Notifications\";\nimport { TOASTS, PAGE_FADE_ANIMATION } from \"config\";\n\nconst MyApp = () => {\n  const [isLoading, setLoading] = useState(false);\n  return (\n    <>\n      <AppRouter\n        basename=\"/react-router-lazy-transitions\"\n        animation={PAGE_FADE_ANIMATION}\n        routes={getRoutes()}\n        onError={props => props.history.replace(\"/error\", props.error)}\n        onLoading={setLoading}\n      />\n      {isLoading && <Loader />}\n      <NotificationsList channel={TOASTS} />\n    </>\n  );\n};\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nexport const ExternalLink = ({\n  to,\n  textColor = \"text-orange-400 hover:text-orange-500\",\n  children\n}) => (\n  <a\n    href={to}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className={`${textColor} underline`}\n  >\n    {children}\n  </a>\n);\n","export const TOASTS = \"Toasts\";\n\nexport const PAGE_FADE_ANIMATION = {\n  timeout: 500,\n  classNames: {},\n  onEnter(elem) {\n    elem.classList.add(\"opacity-0\");\n  },\n  onEntering(elem) {\n    elem.classList.add(\"transition\", \"ease-in-out\", \"duration-500\");\n    elem.classList.remove(\"opacity-0\");\n  },\n  onExit(elem) {\n    elem.classList.add(\"opacity-0\");\n  },\n  onExited(elem) {\n    elem.classList.add(\"hidden\");\n  },\n};\n\nexport const NOTIFICATION_FADE_ANIMATION = {\n  timeout: 500,\n  classNames: {},\n  onEnter(elem) {\n    elem.classList.add(\"opacity-0\", \"scale-0\");\n  },\n  onEntering(elem) {\n    elem.classList.add(\"ease-out\", \"duration-300\");\n    elem.classList.remove(\"opacity-0\", \"scale-0\");\n  },\n  onExit(elem) {\n    elem.classList.add(\"ease-in\", \"duration-500\");\n  },\n  onExiting(elem) {\n    elem.classList.add(\"opacity-0\", \"scale-0\");\n  },\n};\n"],"sourceRoot":""}