{"version":3,"sources":["pages/Home/logo.svg","AppRouter.js","pages/Home/Home.js","serviceWorker.js","index.js","routes.js"],"names":["module","exports","AnimationApp","routes","timeout","location","useLocation","useState","activePage","setActivePage","onReady","route","routeProps","a","getComponent","Component","initialProps","key","Fragment","map","exact","path","render","TransitionGroup","className","CSSTransition","classNames","links","PageLoader","useEffect","importComponent","component","Error","default","getInitialProps","React","memo","Home","this","props","history","push","console","log","src","logo","alt","to","success","onClick","onNavigate","bind","defaultProps","Boolean","window","hostname","match","ReactDOM","basename","cancel","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3262d7fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    useLocation\n} from 'react-router-dom'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\n/**\n * Main router component\n */\nexport const AppRouter = props => {\n    // console.log('AppRouter::render');\n    return (\n        <Router basename=\"/react-router-lazy-transitions\">\n            <AnimationApp {...props} />\n        </Router>\n    );\n}\n\nconst AnimationApp = ({ routes, timeout }) => {\n    const location = useLocation();\n    const [activePage, setActivePage] = useState(null);\n\n    const onReady = async function (route, routeProps) { \n        if (!activePage || activePage.route !== route) {\n            const { Component, initialProps } = await getComponent(route);\n            setActivePage({ Component, initialProps, route, routeProps });\n        }\n    };\n\n    const key = (activePage && activePage.routeProps.location.key) || 'initial'\n    // console.log('AnimationApp::render');\n    return (\n        <React.Fragment>\n            {/*(!activePage || activePage.routeProps.location.key !== location.key) &&\n                <div>Loading...</div>\n            */}\n            <Switch location={location}>\n                {routes.map(route =>\n                    <Route\n                        exact\n                        key={route.path}\n                        path={route.path}\n                        render={routeProps => (\n                            <PageLoader\n                                route={route}\n                                routeProps={routeProps}\n                                onReady={onReady}\n                            />\n                        )}\n                    />\n                )}\n            </Switch>\n            <TransitionGroup className=\"transition-group\">\n                {/*\n                 * CSSTransition element has to be a direct descendant of TransitionGroup\n                 *  Otherwise the exit animations won't work\n                 */}\n                {activePage &&\n                    <CSSTransition\n                        key={key}\n                        classNames=\"container--fade\"\n                        timeout={timeout}\n                        // onEnter={() => console.log('onEnter', key)}\n                        // onEntering={() => console.log('onEntering', key)}\n                        // onEntered={() => console.log('onEntered', key)}\n                        // onExit={() => console.log('onExit', key)}\n                        // onExiting={() => console.log('onExiting', key)}\n                        // onExited={() => console.log('onExited', key)}\n                    >\n                        <activePage.Component\n                            {...activePage.routeProps}\n                            {...activePage.initialProps}\n                            links={activePage.route.links}\n                        />\n                    </CSSTransition>\n                }\n            </TransitionGroup>\n        </React.Fragment>\n    );\n};\n\nconst PageLoader = ({ route, routeProps, onReady }) => {\n    useEffect(() => {\n        onReady(route, routeProps);\n    }, [route, routeProps, onReady])\n\n    // console.log('PageLoader::render');\n    return null;\n}\n\n\n// const delay = time => (new Promise(resolve => setTimeout(resolve, time)));\n\nasync function getComponent(route) {\n    // console.log('getComponent ', route.path);\n\n    if (!route.importComponent && !route.component) {\n        throw new Error('A route must include a component or importComponent method');\n    }\n\n    let Component, initialProps;\n\n    if (typeof route.importComponent === 'function') {\n        // await delay(500);\n        const module = await route.importComponent();\n        Component = module.default;\n\n    } else {\n        Component = route.component\n    }\n\n    if (typeof Component.getInitialProps === 'function') {\n        // await delay(500);\n        initialProps = await Component.getInitialProps();\n    }\n\n    Component = React.memo(Component);\n    return { Component, initialProps };\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './Home.css';\n\nexport default class Home extends Component {\n   static defaultProps = {\n      history: null,\n      links: { success: '/' }\n   };\n\n   static async getInitialProps() {\n      // console.log('Home::getInitialProps');\n      return {};\n   }\n\n   onNavigate() {\n      this.props.history.push('/search'); // this.props.links.success);\n   }\n\n   // componentDidMount() { console.log('Home::componentDidMount'); }\n   // componentWillUnmount() { console.log('Home::componentWillUnmount'); }\n\n   render() {\n      console.log('Home::render'); //, this.props);\n      return (\n         <div className=\"App\">\n            <header className=\"App-header\">\n               <img src={logo} className=\"App-logo\" alt=\"logo\" />\n               <p>\n                  Cupcake ipsum dolor sit. Amet jelly-o caramels liquorice apple pie. Brownie lemon drops cookie tart gummies jelly beans I love souffl√©. Caramels apple pie powder tootsie roll I love jelly beans dessert danish I love. Halvah I love pie bear claw wafer macaroon halvah sesame snaps. Liquorice marzipan brownie icing.\n               </p>\n               <p>\n                  <Link to={this.props.links.success} className=\"App-link\">\n                     Navigate using a link\n                  </Link>\n               </p>\n               <p>\n                  <button\n                     className=\"btn\"\n                     onClick={this.onNavigate.bind(this)}\n                  >\n                     Navigate Imperatively\n                  </button>\n               </p>\n            </header>\n         </div>\n      );\n   }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './AppRouter';\nimport getRoutes from './routes'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter routes={getRoutes()} timeout={300} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Home from 'pages/Home/Home'\n// import Search from 'pages/Search/Search'\n// import Flights from 'pages/Flights/Flights'\n\nexport default function getRoutes() {\n    return [\n        {\n            path: '/',\n            component: Home,\n            links: {\n                success: '/search'\n            }\n        },\n        {\n            path: '/search',\n            // component: Search,\n            importComponent: () => import('pages/Search/Search'),\n            links: {\n                success: '/flights',\n                cancel: '/'\n            }\n        },\n        {\n            path: '/flights',\n            // component: Flights,\n            importComponent: () => import('pages/Flights/Flights'),\n            links: {\n                cancel: '/'\n            }\n        }\n    ];\n}\n"],"sourceRoot":""}