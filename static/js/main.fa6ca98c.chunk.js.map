{"version":3,"sources":["pages/Home/logo.svg","AppRouter.js","pages/Home/Home.js","serviceWorker.js","index.js","routes.js"],"names":["module","exports","AnimationApp","routes","timeout","location","useLocation","useState","activePage","setActivePage","Component","props","key","Fragment","map","route","exact","path","render","routeProps","className","TransitionGroup","CSSTransition","classNames","PageLoader","children","isReady","setReady","req","useRef","current","useEffect","getComponent","then","a","importComponent","component","Error","default","getInitialProps","initialProps","React","memo","links","Home","this","history","push","console","log","src","logo","alt","to","success","onClick","onNavigate","bind","defaultProps","Boolean","window","hostname","match","ReactDOM","basename","cancel","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa6ca98c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useRef } from 'react'\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    useLocation\n} from 'react-router-dom'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\n/**\n * Main router component\n */\nexport const AppRouter = props => {\n    // console.log('AppRouter::render');\n    return (\n        <Router basename=\"/react-router-lazy-transitions\">\n            <AnimationApp {...props} />\n        </Router>\n    );\n}\n\nconst AnimationApp = ({ routes, timeout }) => {\n    const location = useLocation();\n    const [activePage, setActivePage] = useState({});\n    const { Component, props } = activePage;\n    const key = (props && props.location.key) || 'initial'\n\n    return (\n        <React.Fragment>\n            {/*\n              * When a new route is matched, instead of directly rendering a page\n              *  we first fetch the component (if needed) and then\n              *  fetch its initial properties (if needed)\n              */}\n            <Switch location={location}>\n                {routes.map(route =>\n                    <Route\n                        exact\n                        key={route.path}\n                        path={route.path}\n                        render={routeProps => (\n                            <PageLoader\n                                route={route}\n                                routeProps={routeProps}\n                                setActivePage={setActivePage}\n                            >\n                                <div className=\"loading-bar absolute inset-x-0 top-0 h-1\"></div>\n                            </PageLoader>\n                        )}\n                    />\n                )}\n            </Switch>\n            {/*\n              * Once the component is fully loaded we display it\n              *  using a CSS transition so that we can animate the change\n              */}\n            <TransitionGroup className=\"flex\">\n                {/*\n                  * CSSTransition element has to be a direct descendant of TransitionGroup\n                  *  Otherwise the exit animations won't work\n                  */}\n                {Component &&\n                    <CSSTransition\n                        key={key}\n                        classNames=\"container--fade\"\n                        timeout={timeout}\n                    >\n                        <Component {...props}/>\n                    </CSSTransition>\n                }\n            </TransitionGroup>\n        </React.Fragment>\n    );\n};\n\nconst PageLoader = ({ children, ...props }) => {\n    const [isReady, setReady] = useState(false);\n\n    // Use a ref on the props to ensure we run the effect\n    //  only once during the life of this component\n    const req = useRef(props).current;\n    useEffect(() => {\n        getComponent(req).then(() => setReady(true));\n    }, [req]);\n\n    return isReady ? null : children;\n}\n\n// const delay = time => (new Promise(resolve => setTimeout(resolve, time)));\n\nasync function getComponent({ route, routeProps, setActivePage }) {\n    if (!route.importComponent && !route.component) {\n        throw new Error('A route must include a component or importComponent method');\n    }\n\n    let Component, initialProps;\n\n    if (typeof route.importComponent === 'function') {\n        // await delay(500);\n        const module = await route.importComponent();\n        Component = module.default;\n\n    } else {\n        Component = route.component\n    }\n\n    if (typeof Component.getInitialProps === 'function') {\n        // await delay(500);\n        initialProps = await Component.getInitialProps();\n    }\n\n    setActivePage({\n        Component: React.memo(Component),\n        props: {\n            ...routeProps,\n            ...initialProps,\n            links: route.links\n        }\n    });\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport logo from './logo.svg';\n\nexport default class Home extends Component {\n   static defaultProps = {\n      history: null,\n      links: { success: '/' }\n   };\n\n   static async getInitialProps() {\n      // console.log('Home::getInitialProps');\n      return {};\n   }\n\n   onNavigate() {\n      this.props.history.push('/search'); // this.props.links.success);\n   }\n\n   // componentDidMount() { console.log('Home::componentDidMount'); }\n   // componentWillUnmount() { console.log('Home::componentWillUnmount'); }\n\n   render() {\n      console.log('Home::render'); //, this.props);\n      return (\n         <div className=\"w-full\">\n            <div className=\"max-w-3xl mx-auto flex p-6 bg-white rounded-lg shadow mt-4\">\n               <div className=\"flex-shrink-0\">\n                  <img src={logo} className=\"app-logo h-32 w-32\" alt=\"logo\" />\n               </div>\n               <div className=\"pt-1\">\n                  <h4 className=\"text-xl text-gray-900 leading-tight\">\n                     Home\n                  </h4>\n                  <p className=\"text-base text-gray-600 leading-normal mb-2\">\n                     Cupcake ipsum dolor sit. Amet jelly-o caramels liquorice apple pie. Brownie lemon drops cookie tart gummies jelly beans I love souffl√©. Caramels apple pie powder tootsie roll I love jelly beans dessert danish I love. Halvah I love pie bear claw wafer macaroon halvah sesame snaps. Liquorice marzipan brownie icing.\n                  </p>\n                  <p className=\"text-base text-gray-600 leading-normal mb-2\">\n                     <Link to={this.props.links.success} className=\"text-blue-500 hover:text-blue-700 underline\">\n                        Navigate using a link\n                     </Link>\n                  </p>\n                  <p className=\"text-base text-gray-600 leading-normal mb-2\">\n                     <button\n                        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n                        onClick={this.onNavigate.bind(this)}\n                     >\n                        Navigate Imperatively\n                     </button>\n                  </p>\n               </div>\n            </div>\n         </div>\n      );\n   }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/bundle.css';\n\nimport { AppRouter } from './AppRouter';\nimport getRoutes from './routes'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter routes={getRoutes()} timeout={500} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Home from 'pages/Home/Home'\n// import Search from 'pages/Search/Search'\n// import Flights from 'pages/Flights/Flights'\n\nexport default function getRoutes() {\n    return [\n        {\n            path: '/',\n            component: Home,\n            links: {\n                success: '/search'\n            }\n        },\n        {\n            path: '/search',\n            // component: Search,\n            importComponent: () => import('pages/Search/Search'),\n            links: {\n                success: '/flights',\n                cancel: '/'\n            }\n        },\n        {\n            path: '/flights',\n            // component: Flights,\n            importComponent: () => import('pages/Flights/Flights'),\n            links: {\n                cancel: '/'\n            }\n        }\n    ];\n}\n"],"sourceRoot":""}