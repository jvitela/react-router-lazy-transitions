{"version":3,"sources":["pages/Home/logo.svg","pages/Home/Home.js","lib/Utils.js","App.js","routes.js","serviceWorker.js","index.js"],"names":["module","exports","Home","this","props","history","push","className","src","logo","alt","to","links","success","onClick","onNavigate","bind","Component","defaultProps","reducer","state","action","type","location","key","result","concat","entities","initialProps","isExiting","isEntered","onLocationChanged","reduce","accumulator","currKey","onPageEnter","filter","itm","onPageExited","onPageEntered","TransitionRouter","routes","useReducer","dispatch","useEffect","locationChanged","toRender","toFetchData","forEach","entity","groupEntities","Fragment","map","onPageReady","iniProps","pageEnter","timeout","classNames","onExited","pageExited","onEntered","pageEntered","RouterLocation","nextProps","route","getComponent","exact","path","component","React","importComponent","getLazyComponent","withPageLifeCycle","Error","LazyPage","lazy","a","default","fallback","Page","PageLoader","fetchInitialProps","then","getInitialProps","PageRenderer","pageProps","AppRouter","render","cancel","Boolean","window","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,iSCKtBC,G,2LAYfC,KAAKC,MAAMC,QAAQC,KAAK,a,+BAQxB,OACG,yBAAKC,UAAU,OACZ,4BAAQA,UAAU,cACf,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4VAGA,2BACG,kBAAC,IAAD,CAAMC,GAAIR,KAAKC,MAAMQ,MAAMC,QAASN,UAAU,YAA9C,0BAIH,2BACG,4BACGA,UAAU,MACVO,QAASX,KAAKY,WAAWC,KAAKb,OAFjC,+B,4KAzBL,I,sGARqBc,c,04BAAbf,EACXgB,aAAe,CACnBb,QAAS,KACTO,MAAO,CAAEC,QAAS,MCPxB,IAiEaM,EAAU,SAACC,EAAOC,GAE3B,OAAQA,EAAOC,MACX,IAAK,kBACD,OArEc,SAACF,EAAOG,GAC9B,IAAMC,EAAMD,EAASC,KAAO,UAW5B,MAAO,CAAEC,OAVML,EAAMK,OAAOC,OAAOF,GAUlBG,SATH,KACPP,EAAMO,SADC,eAETH,EAAM,CACHD,WACAK,aAAc,KACdC,WAAW,EACXC,WAAW,MA4DJC,CAAkBX,EAAOC,EAAOE,UAE3C,IAAK,YACD,OAzDQ,SAACH,EAAOI,GAA4B,IAAvBI,EAAsB,uDAAP,GACtCD,EAAWP,EAAMK,OAAOO,QAAO,SAACC,EAAaC,GAa/C,OAZIA,IAAYV,EACZS,EAAYT,GAAZ,KACOJ,EAAMO,SAASH,GADtB,CAEII,iBAIJK,EAAYC,GAAZ,KACOd,EAAMO,SAASO,GADtB,CAEIL,WAAW,IAGZI,IACR,IAEH,OAAO,EAAP,GAAYb,EAAZ,CAAmBO,aAwCJQ,CAAYf,EAAOC,EAAOG,IAAKH,EAAOO,cAEjD,IAAK,aACD,OAxCS,SAACR,EAAOI,GACzB,IAAMC,EAASL,EAAMK,OAAOW,QAAO,SAAAC,GAAG,OAAKA,IAAQb,KADlB,EAEOJ,EAAMO,SAFb,EAExBH,GACT,MAAO,CAAEC,SAAQE,SAHgB,eAExBH,GAFwB,SAwClBc,CAAalB,EAAOC,EAAOG,KAEtC,IAAK,cACD,OArCU,SAACJ,EAAOI,GAC1B,OAAO,EAAP,GACOJ,EADP,CAEIO,SAAS,EAAD,GACDP,EAAMO,SADL,eAEHH,EAFG,KAGGJ,EAAMO,SAASH,GAHlB,CAIAM,WAAW,QA8BRS,CAAcnB,EAAOC,EAAOG,KAEvC,QACI,OAAOJ,I,yjBCpEnB,IAUMoB,EAAmB,SAAC,GAA0B,IAAxBjB,EAAuB,EAAvBA,SAAUkB,EAAa,EAAbA,OAAa,EACrBC,qBAAWvB,EDoCH,CAClCM,OAAQ,GACRE,SAAU,KCvCqC,mBACxCP,EADwC,KACjCuB,EADiC,KAG/CC,qBAAU,WACND,ED4BuB,SAAApB,GAAQ,MAAK,CAAED,KAAM,kBAAmBC,YC5BtDsB,CAAgBtB,MAC1B,CAACA,IAL2C,MA2CnD,SAAuBH,GACnB,IAAM0B,EAAW,GACXC,EAAc,GAcpB,OAbA3B,EAAMK,OAAOuB,SAAQ,SAAAxB,GACjB,IAAMyB,EAAS7B,EAAMO,SAASH,GACF,OAAxByB,EAAOrB,aAGPmB,EAAYzC,KAAK,CAAE2C,SAAQzB,QAEnByB,EAAOpB,WAGfiB,EAASxC,KAAK,CAAE2C,SAAQzB,WAGzB,CAAEsB,WAAUC,eApDeG,CAAc9B,GAAxC0B,EAPuC,EAOvCA,SAAUC,EAP6B,EAO7BA,YAClB,OACI,kBAAC,IAAMI,SAAP,KAEIJ,EAAYK,KAAI,gBAAGH,EAAH,EAAGA,OAAQzB,EAAX,EAAWA,IAAX,OACZ,kBAAC,EAAD,CACIA,IAAKA,EACLiB,OAAQA,EACRlB,SAAU0B,EAAO1B,SACjBK,aAAc,KACdyB,YAAa,SAAAC,GAAQ,OAAIX,EDgBpB,SAACnB,EAAKI,GAAN,MAAwB,CAAEN,KAAM,YAAaE,MAAKI,gBChBrB2B,CAAU/B,EAAK8B,UAGzD,kBAAC,kBAAD,CAAiB/C,UAAU,oBAEvBuC,EAASM,KAAI,gBAAGH,EAAH,EAAGA,OAAQzB,EAAX,EAAWA,IAAX,OACT,kBAAC,gBAAD,CACIA,IAAKA,EACLgC,QAAS,IACTC,WAAW,kBACXC,SAAU,kBAAMf,EDOd,SAAAnB,GAAG,MAAK,CAAEF,KAAM,aAAcE,OCPPmC,CAAWnC,KACpCoC,UAAW,kBAAMjB,EDOd,SAAAnB,GAAG,MAAK,CAAEF,KAAM,cAAeE,OCPRqC,CAAYrC,MAEtC,kBAAC,EAAD,CACIiB,OAAQA,EACRlB,SAAU0B,EAAO1B,SACjBK,aAAcqB,EAAOrB,sB,IAgC3CkC,E,8LAGoBC,GAClB,OAAQ5D,KAAKC,MAAMwB,eAAiBmC,EAAUnC,e,+BAGxC,IAAD,EACmDzB,KAAKC,MAArDqC,EADH,EACGA,OAAQlB,EADX,EACWA,SAAUK,EADrB,EACqBA,aAAcyB,EADnC,EACmCA,YACxC,OACI,yBAAK9C,UAAU,aACf,kBAAC,IAAD,CAAQgB,SAAUA,GACbkB,EAAOW,KAAI,SAAAY,GACR,IAAM/C,EAAYgD,EAAaD,GAC/B,OACI,kBAAC,IAAD,CACIE,OAAK,EACL1C,IAAKwC,EAAMG,KACXA,KAAMH,EAAMG,KACZC,UAAW,SAAAhE,GAAK,OACZ,kBAACa,EAAD,iBACQb,EADR,CAEI+D,KAAMH,EAAMG,KACZvC,aAAcA,EACdyB,YAAaA,iB,GAxBpBgB,IAAMpD,WAwC7BgD,EAAe,SAACD,GAClB,GAAIA,EAAMM,gBACN,OAAOC,EAAiBP,GAG5B,GAAIA,EAAMI,UACN,OAAOI,EAAkBR,EAAMI,UAAWJ,GAG9C,MAAM,IAAIS,MAAM,+DASdF,EAAmB,SAACP,GACtB,IAAMU,EAAWC,eAAI,sBAAC,4BAAAC,EAAA,sEACGZ,EAAMM,kBADT,cACZtE,EADY,8BAIXA,EAJW,CAKd6E,QAASL,EAAkBxE,EAAO6E,QAASb,MAL7B,4CAStB,OAAO,SAAA5D,GAAK,OACR,kBAAC,WAAD,CAAU0E,SAAU,MAChB,kBAACJ,EAAatE,MAKpBoE,EAAoB,SAACO,EAAMf,GAAW,IAElCgB,EAFiC,4LAM/B7E,KAAK8E,oBAAoBC,KAAK/E,KAAKC,MAAMiD,eANV,6JAUK,oBAAzB0B,EAAKI,gBAVe,gCAWJJ,EAAKI,gBAAgBhF,KAAKC,OAXtB,cAWrBkD,EAXqB,yBAYpBA,GAZoB,qIAmB/B,OAAO,SAnBwB,GAEde,IAAMpD,WAqBzBmE,EAAe,SAAC,GAAD,IAAGxD,EAAH,EAAGA,aAA8ByD,GAAjC,EAAiBhC,YAAjB,sDACjB,kBAAC0B,EAAD,iBAAUnD,EAAkByD,EAA5B,CAAuCzE,MAAOoD,EAAMpD,UASxD,OANkB,SAAAR,GAAK,OACI,OAAvBA,EAAMwB,aACA,kBAACoD,EAAe5E,GAChB,kBAACgF,EAAiBhF,KAMjBkF,EA1LG,kBAChB,kBAAC,IAAD,KACM,kBAAC,IAAD,CACIC,OAAQ,SAAAnF,GAAK,OACT,kBAAC,EAAD,iBAAsBA,EAAtB,CAA6BqC,OCblC,CACH,CACI0B,KAAM,IACNC,UAAWlE,EACXU,MAAO,CACHC,QAAS,YAGjB,CACIsD,KAAM,UAENG,gBAAiB,kBAAM,8BACvB1D,MAAO,CACHC,QAAS,WACT2E,OAAQ,MAGhB,CACIrB,KAAM,WAENG,gBAAiB,kBAAM,8BACvB1D,MAAO,CACH4E,OAAQ,eCfJC,QACW,cAA7BC,OAAOnE,SAASoE,UAEe,UAA7BD,OAAOnE,SAASoE,UAEhBD,OAAOnE,SAASoE,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAACO,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.aeacff57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './Home.css';\n\nexport default class Home extends Component {\n   static defaultProps = {\n      history: null,\n      links: { success: '/' }\n   };\n\n   static async getInitialProps() {\n      // console.log('Home::getInitialProps');\n      return {};\n   }\n\n   onNavigate() {\n      this.props.history.push('/search'); // this.props.links.success);\n   }\n\n   // componentDidMount() { console.log('Home::componentDidMount'); }\n   // componentWillUnmount() { console.log('Home::componentWillUnmount'); }\n\n   render() {\n      // console.log('Home::render', this.props);\n      return (\n         <div className=\"App\">\n            <header className=\"App-header\">\n               <img src={logo} className=\"App-logo\" alt=\"logo\" />\n               <p>\n                  Cupcake ipsum dolor sit. Amet jelly-o caramels liquorice apple pie. Brownie lemon drops cookie tart gummies jelly beans I love souffl√©. Caramels apple pie powder tootsie roll I love jelly beans dessert danish I love. Halvah I love pie bear claw wafer macaroon halvah sesame snaps. Liquorice marzipan brownie icing.\n               </p>\n               <p>\n                  <Link to={this.props.links.success} className=\"App-link\">\n                     Navigate using a link\n                  </Link>\n               </p>\n               <p>\n                  <button\n                     className=\"btn\"\n                     onClick={this.onNavigate.bind(this)}\n                  >\n                     Navigate Imperatively\n                  </button>\n               </p>\n            </header>\n         </div>\n      );\n   }\n};\n","\nconst onLocationChanged = (state, location) => {\n    const key = location.key || 'initial';\n    const result = state.result.concat(key);\n    const entities = {\n        ...state.entities,\n        [key]: {\n            location,\n            initialProps: null,\n            isExiting: false,\n            isEntered: false\n        }\n    };\n    return { result, entities };\n};\n\nconst onPageEnter = (state, key, initialProps = {}) => {\n    const entities = state.result.reduce((accumulator, currKey) => {\n        if (currKey === key) {\n            accumulator[key] = {\n                ...state.entities[key],\n                initialProps,\n            };\n\n        } else {\n            accumulator[currKey] = {\n                ...state.entities[currKey],\n                isExiting: true,\n            };\n        }\n        return accumulator;\n    }, {});\n\n    return { ...state, entities };\n};\n\nconst onPageExited = (state, key) => {\n    const result = state.result.filter(itm => (itm !== key));\n    const { [key]: removed, ...entities } = state.entities;\n    return { result, entities };\n};\n\nconst onPageEntered = (state, key) => {\n    return {\n        ...state,\n        entities: {\n            ...state.entities,\n            [key]: {\n                ...state.entities[key],\n                isEntered: true\n            }\n        }\n    };\n};\n\n\nexport const locationChanged = location => ({ type: 'locationChanged', location });\nexport const pageEnter = (key, initialProps) => ({ type: 'pageEnter', key, initialProps });\nexport const pageExited = key => ({ type: 'pageExited', key });\nexport const pageEntered = key => ({ type: 'pageEntered', key });\n\nexport const getInitialState = () => ({\n    result: [],\n    entities: {}\n});\n\nexport const reducer = (state, action) => {\n    // console.log(`---------- ${action.type.toUpperCase()} ----------`);\n    switch (action.type) {\n        case 'locationChanged':\n            return onLocationChanged(state, action.location);\n\n        case 'pageEnter':\n            return onPageEnter(state, action.key, action.initialProps);\n\n        case 'pageExited':\n            return onPageExited(state, action.key);\n\n        case 'pageEntered':\n            return onPageEntered(state, action.key);\n\n        default:\n            return state;\n    }\n};\n","import React, { Suspense, lazy, useReducer, useEffect } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\nimport getRoutes from 'routes'\nimport {\n    getInitialState,\n    reducer,\n    locationChanged,\n    pageEnter,\n    pageExited,\n    pageEntered,\n} from 'lib/Utils'\n\nconst AppRouter = () => (\n  <Router>\n        <Route\n            render={props => (\n                <TransitionRouter {...props} routes={getRoutes()} />\n            )}\n        />\n  </Router>\n);\n\nconst TransitionRouter = ({ location, routes }) => {\n    const [state, dispatch] = useReducer(reducer, getInitialState());\n\n    useEffect(() => {\n        dispatch(locationChanged(location));\n    }, [location]);\n\n    const { toRender, toFetchData } = groupEntities(state);\n    return (\n        <React.Fragment>\n            {// Routes that need to fetch data\n            toFetchData.map(({ entity, key }) => \n                <RouterLocation\n                    key={key}\n                    routes={routes}\n                    location={entity.location}\n                    initialProps={null}\n                    onPageReady={iniProps => dispatch(pageEnter(key, iniProps))}\n                />\n            )}\n            <TransitionGroup className=\"transition-group\">\n                {// Routes that are displayed\n                toRender.map(({ entity, key }) => \n                    <CSSTransition\n                        key={key}\n                        timeout={300}\n                        classNames=\"container--fade\"\n                        onExited={() => dispatch(pageExited(key))}\n                        onEntered={() => dispatch(pageEntered(key))}\n                    >\n                        <RouterLocation\n                            routes={routes}\n                            location={entity.location}\n                            initialProps={entity.initialProps}\n                        />\n                    </CSSTransition>\n                )}\n            </TransitionGroup>\n        </React.Fragment>\n    );\n};\n\n\nfunction groupEntities(state) {\n    const toRender = [];\n    const toFetchData = [];\n    state.result.forEach(key => {\n        const entity = state.entities[key];\n        if (entity.initialProps === null) {\n            // render a router that will output \n            //   a PageLoader wrapper while the initialData is being fetched            \n            toFetchData.push({ entity, key });\n\n        } else if (!entity.isExiting) {\n            // Only render the CSSTransition if the initialProps are set\n            //  And is not already exiting\n            toRender.push({ entity, key });\n        }\n    });\n    return { toRender, toFetchData };\n}\n\n/** \n * Renders the given location\n */\nclass RouterLocation extends React.Component {\n    // Prevent rendering when the Router \n    //  is moved from a Fragment to a Transition\n    shouldComponentUpdate(nextProps) {\n        return (this.props.initialProps !== nextProps.initialProps);\n    }\n\n    render() {\n        const { routes, location, initialProps, onPageReady } = this.props;\n        return (\n            <div className=\"container\">\n            <Switch location={location}>\n                {routes.map(route => {\n                    const Component = getComponent(route);\n                    return (\n                        <Route\n                            exact\n                            key={route.path}\n                            path={route.path}\n                            component={props => (\n                                <Component\n                                    {...props}\n                                    path={route.path}\n                                    initialProps={initialProps}\n                                    onPageReady={onPageReady}\n                                />\n                            )}\n                        />\n                    );\n                })}\n            </Switch>\n            </div>\n        );\n    }\n}\n\n/**\n * Return either a React.lazy or a HOC for initialProps\n* @param {object} route The route info\n*/\nconst getComponent = (route) => {\n    if (route.importComponent) {\n        return getLazyComponent(route);\n    }\n\n    if (route.component) {\n        return withPageLifeCycle(route.component, route);\n    }\n\n    throw new Error('A route must include a component or importComponent method');\n};\n\n\n/**\n * A HOC that returns a Lazy component\n * \n * @param {object} route The route info\n */\nconst getLazyComponent = (route) => {\n    const LazyPage = lazy(async () => {\n        const module = await route.importComponent();\n        // Return the module wrapped in a HOC\n        return {\n            ...module,\n            default: withPageLifeCycle(module.default, route)\n        };\n    });\n\n    return props => (\n        <Suspense fallback={null}>\n            <LazyPage {...props} />\n        </Suspense>\n    );\n}\n\nconst withPageLifeCycle = (Page, route) => {\n\n    class PageLoader extends React.Component {\n        // Load async dependencies for the page\n        //  Only once after the component mounts\n        componentDidMount() {\n            this.fetchInitialProps().then(this.props.onPageReady);\n        }\n\n        async fetchInitialProps() {\n            if (typeof Page.getInitialProps === 'function') {\n                const iniProps = await Page.getInitialProps(this.props);\n                return iniProps;\n            }\n            // return undefined or empty object\n        }\n\n        render() {\n            // Don't render anything yet\n            return null;\n        }\n    }\n\n    const PageRenderer = ({ initialProps, onPageReady, ...pageProps }) => (\n        <Page {...initialProps} {...pageProps} links={route.links} />\n    );\n\n    const Component = props => (\n        props.initialProps === null\n            ? <PageLoader {...props} />\n            : <PageRenderer {...props} />\n    );\n\n    return Component;\n}\n\nexport default AppRouter;\n","import Home from 'pages/Home/Home'\n// import Search from 'pages/Search/Search'\n// import Flights from 'pages/Flights/Flights'\n\nexport default function getRoutes() {\n    return [\n        {\n            path: '/',\n            component: Home,\n            links: {\n                success: '/search'\n            }\n        },\n        {\n            path: '/search',\n            // component: Search,\n            importComponent: () => import('pages/Search/Search'),\n            links: {\n                success: '/flights',\n                cancel: '/'\n            }\n        },\n        {\n            path: '/flights',\n            // component: Flights,\n            importComponent: () => import('pages/Flights/Flights'),\n            links: {\n                cancel: '/'\n            }\n        }\n    ];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}